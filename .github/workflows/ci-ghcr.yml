name: CI / Build & Push to GHCR

on:
  push:
    branches:
      - main
      - develop
      - 'release/**'
    tags:
      - 'v*'

jobs:
  build-and-push:
    name: Build & Push Container to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # 1) Check out the code (with full history to detect tags)
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Install Docker CLI
      - name: Install Docker CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io

      # 3) Install Podman
      - name: Install Podman
        run: |
          sudo sh -c 'echo "deb http://ppa.launchpad.net/projectatomic/ppa/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/projectatomic-ppa.list'
          sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 05B6A192
          sudo apt-get update
          sudo apt-get install -y podman

      # 4) Authenticate to GHCR (GitHub Container Registry)
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 5) Determine image tags based on whether this is a Git tag push
      - name: Determine image tags
        id: tag-info
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v(.+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Detected Git tag: $VERSION"
            echo "IMAGE_TAG=$VERSION" >> $GITHUB_OUTPUT
            echo "LATEST_TAG=latest" >> $GITHUB_OUTPUT
            echo "BUILD_ENV=production" >> $GITHUB_OUTPUT
          else
            echo "No version tag found; using staging"
            echo "IMAGE_TAG=staging" >> $GITHUB_OUTPUT
            echo "LATEST_TAG=staging" >> $GITHUB_OUTPUT
            echo "BUILD_ENV=staging" >> $GITHUB_OUTPUT
          fi

      # 6) Expose those values as environment variables
      - name: Set env vars
        run: |
          echo "SWEDEB_IMAGE_TAG=${{ steps.tag-info.outputs.IMAGE_TAG }}" >> $GITHUB_ENV
          echo "SWEDEB_LATEST_TAG=${{ steps.tag-info.outputs.LATEST_TAG }}" >> $GITHUB_ENV
          echo "BUILD_ENV=${{ steps.tag-info.outputs.BUILD_ENV }}" >> $GITHUB_ENV

      # 7) Install Node.js & pnpm for frontend build
      - name: Install Node.js & pnpm
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install -g pnpm@latest

      # 8) Install Poetry for backend build
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # 9) Build via Makefile (frontend, backend, and container)
      - name: Build via Makefile
        env:
          # The Makefile will source compose/${BUILD_ENV}/.env
          # Ensure Git tags or branch environment is available
          GITHUB_REF: ${{ github.ref }}
        run: |
          make image BUILD_ENV=${{ env.BUILD_ENV }}

      # 10) Tag and push to GHCR
      - name: Tag & Push to GitHub Container Registry
        run: |
          # Derive the GHCR image name: owner/repo
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/swedeb-api"

          # Tag the built image (assumes Makefile built <SWEDEB_IMAGE_NAME>:<SWEDEB_IMAGE_TAG> locally)
          podman tag ${SWEDEB_IMAGE_NAME}:${SWEDEB_IMAGE_TAG} \
                     ${IMAGE_NAME}:${SWEDEB_LATEST_TAG}

          # Push the “latest” or “staging” alias
          podman push ${IMAGE_NAME}:${SWEDEB_LATEST_TAG}

          # If this is a real version build (not “staging”), also push the versioned tag
          if [ "${SWEDEB_IMAGE_TAG}" != "staging" ]; then
            podman tag ${SWEDEB_IMAGE_NAME}:${SWEDEB_IMAGE_TAG} \
                       ${IMAGE_NAME}:${SWEDEB_IMAGE_TAG}
            podman push ${IMAGE_NAME}:${SWEDEB_IMAGE_TAG}
          fi
